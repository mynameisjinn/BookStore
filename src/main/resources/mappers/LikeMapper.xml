<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.example.bookstore.repository.LikeRepository">

    <!--  도서 좋아요 -->
    <insert id="insertUserLike" parameterType="org.example.bookstore.vo.LikesVO">
        INSERT INTO LIKES (
            BOOK_ID,
            MEMBER_ID
       )
        VALUES  (#{bookId}, #{memberId})
    </insert>

    <delete id="deleteUserLike">
        DELETE FROM LIKES
        WHERE MEMBER_ID = #{memberId} AND BOOK_ID = #{bookId}
    </delete>

<!--    <select id="selectUserLikeList" resultType="org.example.bookstore.vo.LikesVO">-->
<!--        SELECT BOOK_ID-->
<!--        FROM LIKES-->
<!--        WHERE MEMBER_ID = #{memberId}-->
<!--    </select>-->

    <select id="selectUserLikeList" resultType="org.example.bookstore.vo.BookVO">
        SELECT  B.ID,
            TITLE,
            A.NAME AS authorName,
            P.NAME AS publisherName,
            PUBLISHED_DATE AS publishedDate,
            B.AUTHOR_ID AS authorId,
            B.PUBLISHER_ID AS publisherId,
            B.PRICE,
            B.CATEGORY_ID AS categoryId,
            B.IMG_PATH AS imgPath
        FROM LIKES L
            JOIN BOOK B
                ON L.BOOK_ID = B.ID
            JOIN AUTHOR A
                ON B.AUTHOR_ID = A.ID
            JOIN PUBLISHER P
                ON B.PUBLISHER_ID = P.ID
        WHERE MEMBER_ID = #{memberId}
    </select>



    <!--  메뉴 즐겨찾기    -->
    <insert id="insertUserFavoriteMenu">
        INSERT INTO USER_MENU (
            MENU_ID,
            MEMBER_ID
        )
        VALUES  (#{menuId}, #{memberId})
    </insert>

    <delete id="deleteUserFavoriteMenu">
        DELETE FROM USER_MENU
        WHERE MEMBER_ID = #{memberId} AND MENU_ID = #{menuId}
    </delete>

    <select id="selectUserFavoriteMenuList" resultType="org.example.bookstore.vo.MenuVO">
        WITH RECURSIVE MENU_TREE AS (
            SELECT
                ID,
                NAME,
                PARENT_ID,
                ID AS ROOT_ID,
                NAME AS ROOT_NAME
            FROM MENU
            WHERE PARENT_ID IS NULL
            UNION ALL
            SELECT
                M.ID,
                M.NAME,
                M.PARENT_ID,
                MT.ROOT_ID,
                MT.ROOT_NAME
            FROM MENU M
            JOIN MENU_TREE MT
                ON M.PARENT_ID = MT.ID
        )
        SELECT  M.ID,
                M.PATH,
                M.NAME,
                MT.ROOT_NAME AS mainMenu
        FROM USER_MENU UM
        JOIN MENU M
            ON UM.MENU_ID = M.ID
        JOIN MENU_TREE MT
            ON M.ID = MT.ID
        WHERE UM.MEMBER_ID = #{memberId}
    </select>
</mapper>